Given typescript (Comment in interface):
  interface Promise<T> {
    /*comment in interface*/
  }

Execute:
  AssertEqual 'typescriptComment', SyntaxAt(2, 3)

Given typescript (Export from):
  export {ChangeDector} from './change_detection';
Execute:
  AssertEqual 'typescriptImport', SyntaxAt(1, 23)

Given typescript (interface property):
  export interface Animation {
    name: string;
  }
Execute:
  AssertEqual 'typescriptPropertySignature', SyntaxAt(2, 3)
  AssertEqual 'typescriptPredefinedType', SyntaxAt(2, 9)

Given typescript (function default param):
  function test({a = process.stdout}) {}
Execute:
  AssertEqual 'typescriptCall', SyntaxAt(1, 16)
  AssertEqual 'typescriptNodeGlobal', SyntaxAt(1, 25)

Given typescript (export after decorator):
  @Inject()
  export class Test {}
Execute:
  AssertEqual 'typescriptExport', SyntaxAt(2, 1)

Given typescript (declare after var):
  var b = (123) && 123
  var k =  new K<Array<number>>()
Execute:
  AssertEqual 'typescriptVariable', SyntaxAt(2, 1)

Given typescript (plain string):
  a = 'static-native'
Execute:
  AssertEqual 'typescriptString', SyntaxAt(1, 5)

Given typescript (reference directive):
  /// <reference path='file' />
Execute:
  AssertEqual 'typescriptString', SyntaxAt(1, 24)

Given typescript (predefined props):
  document.createElement
Execute:
  AssertEqual 'typescriptBOMWindowProp', SyntaxAt(1, 1)
  AssertEqual 'typescriptDOMDocMethod', SyntaxAt(1, 12)

Given typescript (return object):
  function test() {
    return { test: 123}
  }
Execute:
  AssertEqual 'typescriptStatementKeyword', SyntaxAt(2, 3)
  AssertEqual 'typescriptObjectLabel', SyntaxAt(2, 14)

Given typescript (double ambient declare):
  declare module 'eslint-plugin-vue'
  declare module 'vscode-emmet-helper'
Execute:
  AssertEqual 'typescriptAmbientDeclaration', SyntaxAt(1, 1)
  AssertEqual 'typescriptAmbientDeclaration', SyntaxAt(2, 1)

Given typescript (double ambient declare):
  function test() {
    return { name: 123, }
  }
Execute:
  AssertEqual 'typescriptObjectLabel', SyntaxAt(2, 12)

Given typescript (abstract generic method):
  abstract class ComponentFactoryResolver {
    abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;
  }
Execute:
  AssertEqual 'typescriptMethodSignature', SyntaxAt(2, 12)

Given typescript (binary in keyword):
  var a = a in b
Execute:
  AssertEqual 'typescriptKeywordOp', SyntaxAt(1, 11)

Given typescript (comment in func param):
  function commentInFuncParam(/*test*/ a) { }
Execute:
  AssertEqual 'typescriptComment', SyntaxAt(1, 30)

Given typescript(handle comment and divide):
  var a = 'static-native'
  // test
  var a = 1/3
  /* test */
Execute:
  AssertEqual 'typescriptLineComment', SyntaxAt(2, 1)
  AssertEqual 'typescriptNumber', SyntaxAt(3, 11)
  AssertEqual 'typescriptComment', SyntaxAt(4, 1)
